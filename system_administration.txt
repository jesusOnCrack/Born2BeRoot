########### GUIDELINES ###############

1. get a similar structure to BonusPartitions.png
2. Set password rules:
2.1. User:
		2.1.1. Can't include the name of the user
		2.1.2. At least 7 chars that are not part of the former password
		2.1.3. Axpire in 30 days
		2.1.4. 2 days minimum wihtout changing the password after creating it 
		2.1.5. User has to receive a warning message 7 days before expiration
		2.1.6. Must be 10 chars long, 1 uppercase letter, 1 lowercase letter, 1 number, max 3 consecutive chars
		2.1.7.Update password rules for the already existing users (chage)
3. Setup SELinux to run on startup
4. Root cannot connect using ssh
5. Set up a firewall:
	5.1. Active on startup
	5.2. leave only 4242 port open
6. Set up hostname to be [user]42 7. Strict rules: 7.1. Authentication using sudo has to be limited to 3 attempts of password insertions
	7.2. Custom message prompting after wrong password insertion 
	7.3. Each action using sudo has to be archived(inputs and outputs). log files saved in "/var/log/sudo/folder"
	7.4. TTY mode has to be enabled for security reasons
	7.5. For security reasons, paths allowed for sudo must be restricted. Ex.: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
8. set up a user with a username login along with root user belonging to user42 and sudo groups
9. Create a script (monitorinh.sh script Script.png)
	9.1. developed in bash
	9.2. at server startup and every 10 min.
	9.3. script will display info:
		9.3.1. operating system architechture and kernel version
		9.3.2. number of physical processors
		9.3.3. number of virtual processors
		9.3.4. available RAM atm and utilization rate in percentage
		9.3.5. current utilization rate of processors in percentage
		9.3.6. date and time of last reboot
		9.3.7. wether LVM is active or not
		9.3.8. number of active connections
		9.3.9. number of users using the server
		9.3.10. number of users using the server
		9.3.11. IPv4 address of my server and MAC address
		9.3.12. number of commands executed with sudo program
10. Set up a functional WordPress website with the following services: lighttpd, MariaDB, PHP
11. Set up a service of my choice that is useful (NO NGINX or Apache2)
12. Change all the passwords of the accounts present on the virtual machine, including the root

1. Download ISO
2. Install


############# DELIVERY #################

Preparation
1. turn in a signature.txt file at the root of Git repo
2. paste the file in the signature of my machine's virtual disk
	2.1. Open the default installation folder (where VM's are saved) - ~/VirtualBox VMs/
	2.2. Retrieve the signature from the ".vdi" file of your virtual machine in sha1 format -> sha1sum rocky_serv.vdi | output -> 6e657c4619944be17df3c31faa030c25e43e40af
3. VM's signature may be altered after first evaluation -> duplicate the VM or use save state
4. Checking if the mandatory setup is correct Check.png

############ STUDY SOURCES ###################

WHOLE PROCESS IN A VIDEO -> https://www.youtube.com/watch?v=DwO7dn5iNJ0
< Kernel >

The core program under wich the OS is built upon, acting as a bridge between the user interface and the physical hardware. The kernel manages all system resources.


< DKMS >

-|> Dynamic Kernel Module Support, is a framework in LInux that simplifies the process of building and managing a kernel modules whose source code is located outside the main kernel source tree. A tool that helps automatically rebuild kernel modules when a new kernel is installed, ensuring compatibility.
-|> Module Management
Manages the kernel modules that are not part of the standard kernel distribution
-|> Automatic Rebuilding
It automatically rebuilds these modules when a new kernel is installed, ensuring they remain functional
-|> Simplified Installation
Makes it easier to install and update external kernel modules
-|> Version Tracking
Keeps track of the module's version and ensures compatibility with the current kernel
-|> The steps for its function are:
	-|> Module Source Code Location outside the kernel tree.
	-|> DKMS Configuration of the module.
	-|> Kernel Installation by rebuilding the module.
	-|> Module Installation of the rebuilt module and made available for use.


< Anaconda>

-|> An installer program used by Fedora and Red Hat to install an manage the operating system.


< Virtualization >

-|> A technology that allows the user to create multilpe simulated environments using a limited amount of the physical resources of a given device. Through this method, it is possible simulate another machine, a virtual machine that is independent from the operative system through which is running. This technology is possible to be applied directly(type 2) or indirectly, through an OS(type 1).
-|> It is possible due to the use of an hyperviser, which asks the OS to use some of the resource that the OS is using(CPU, RAM, HDD/SSD)


< SELinux >

-|> Security-Enhanced Linux is a security architechture for Linux systems that allows administrators to have more control over hwho can access the system.
-|> SELinux defines access controls for the applications, processes, and files on a system. It uses security policies, which are set of rules that tell SELinux what can or can't be accessed, to enforce the acess allowed by a policy.


package manager -> https://www.redhat.com/en/blog/how-manage-packages


APTITUDE -> https://www.digitalocean.com/community/tutorials/what-is-apt


dnf (apt)-> https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html-single/managing_software_with_the_dnf_tool/index#proc_providing-feedback-on-red-hat-documentation_managing-software-with-the-dnf-tool    https://www.redhat.com/en/blog/dnf-apt-users


/*old apt with full-screen UI and extra features. can detangle conflicts.*/


> SSH <

-|> Secure Shell. A network communication protocol that enables two computers to communicate and share data. This communication is encrypted, which means it can be used with insecure networks.
It is usually used to "login" and perform operations on remote computers, but it may also be used for transferring data.
-|> SSH sets up a connection between a user's device and a faraway machine, often a server. It uses encryption to scramble the data that traverses the connection. An intercepting party would only find something like static-random data that means nothing unless it is decrypted. 
-|> SSH is very secure because it relies on a key authentication that use a private and a public key. Anyone can have access to the public key, but the private key is held by only the owner. When trying to connect to the public key, the user is check to see if it posseses the private key, and only then is the connection made.
-|> To configure SELinux, one should use targeted policy or multi-level security (MLS). Targeted policy is the default way of configuring it. MLS is very complicated and typically used only by government organizations. etc/sysconfig/selinux files tells the user in which mode is configured (permissive, enforcing, disabled) and which policy is loaded.

> Tunneling <
In networking, a method for moving packets across a network using a protocol or path they would not ordinarily be able to use. It's the act of wrapping data packets(small chunks of data) with additional information (called headers) to change their destination. SSH tunnels use a technique called port forwarding to send packets from one machine to another.

< BRIDGED VS NAT >

-|> Bridged makes the VM act is if it was connected to the same cable/network as the host computer. It get addresses the same way everything else gets addresses on that network. Probably from some DHCP server running somewhere. NAT basically sets up your computer as a virtual router, DHCP, and firewall. It separates the VM from the host, and the rest of the network. The reason you might want NAT is if you want to try to separate your VM from the rest of your network. If you want to access resources from the VM that the host has access to, then you almost certainly want bridged. Many protocols like SMB don't really work well through a NAT.


< DHCP >

-|> Dynamic Host Configuration Protocol, is a network management protocol used to automatically assign IP addresses and other network configuration (like DNS, gateway) to devices on a network.
-|> Steps:
	-|> Assigns a IP address.
	-|> Provides the subnet mask.
	-|> Gives the default gateway.
	-|> Supplies DNS server information.


< cryptsetup >

-|> A utility to set up and manage disk encryption using the dm-crypt kernel moodule on Linux systems. It is used with LUKS, which provides a standard format for disk encryption. Disk encryption, securing external drive setup and encrypting swap partitions.
-|> Steps:
	-|> Device Encryption, initializing and configuring encrypted volumes using LUKS or plain dm-crypt.
	-|> Opening Encrypted Volumes, unlocking and mapping an encrypted deviceto a decrypted virtual device.
	-|> Managing LUKS Volumes, adding/removing passphrases, changing encryption keys and checking volume integrity.
	-|> LUKS Header Operations, backing up and restoring LUKS headers and dumping LUKS header information.


< LUKS >

-|> Linux Unified Key Setup, a standard for disk encryption on Linux, manages encryption keys and metadata for block device encryption using dm-encrypt, a Linux kernel subsystem. It doesn't handle encryption itself, byt provides a structure to make using encryption secure and practical.
-|> Features:
	-|> Multiple Passphares, supports up to 8 key slots.
	-|> Secure Key Management, Encryption keys are never exposed directly, only passphrases are used to unlock encryption keys.
	-|> Metadata Storage, stores encryption parameters (cipher, hash, key size) ina standardized header on the device).
	-|> Compatibility, because it's a standard, LUKS-encrypted volumes can be moved between systems and still be accessible.
	-|> Header Backup/Restore, the LUKS header can be backed up in case of damage - important because losing the header means losing access to your data.



< RSA >

-|> Rivest-Shamir-Adleman algorithm is one of the first public-key cryptosystems and is widely used for secure data transmission. It's named after its inventors, Ron Rivest, Adi Shamir and Leonard Adleman, who introduced it in 1977. It is used in SSH, TLS/SSL(HTTP websites), Digital Signatures and Secure Email (PGP/GPG).
-|> The public key encrypts data and verifies a signature.
-|> The private key decrypts data and creates a signature.
-|> Algorithm:
	-|> Key generation:
		-|> Choice of two large prime numbers - p and q.
		-|> Calculate n = p x q.
		-|> Calculate φ(n) = (p-1) x (p+1).
		-|> Choose an encryption exponent e such that 1 < e < φ(n).
		-|> Compute the decryption exponent d, the modular inverse of e mod φ(n).
	-|> Encryption:
		-|> Convert plaintext into a number m such that 0 < m < n.
		-|> Compute ciphertext c = m^e mod n.
	-|> Decryption:
		-|> Compute m = c^d mod n.


< daemon >

-|> Jokingly "Disk And Execution MONitor", but actually coming from the greek mythology - a guiding spirit, is a long-running background process/service on Unix-like operating systems that runs continously and performs specific tasks or services without direct user interaction that starts at boot time. Examples are:
	-|> ssd, Handles incoming SSH connections.
	-|> httpd, Runs a web server(e.g., Apache).
	-|> crond, Manages scheduled taks(cron jobs).
	-|> systemd, System and service manager.
	-|> cupsd, Handles printing services.


< PID >

-|> Process IDentifier, is a unique number that the operating system assigns to each running process. Ways to manipulate:
	-|> ps, show all running process.
	-|> ps -ef, alternative format to list process.
	-|> pidof <program>, get PID of a running program.
	-|> kill <PID>, terminate a process.
	-|> top/htop, interactive process viewer with PIDs.
	-|> kill -9 <PID>, forcefully kill a process (SIGKILL).
-|> init/systemd process always has PID 1.
-|> Only sudo or owner user can kill or control processess.


< systemctl >

-|> The command-line tool used to control and manage services (daemons) system states, and units on Linux systems that use systemd as their init system.


< systemd > is the init system used by most modern Linux distributions (Ubuntu, Debian, CentOS, Fedora, Arch). It manages services, mount points, timers (cron jobs), and system startup and shutdown. systemctl is the tool to interact with it. Useful commands:
	-|> sudo systemctl start <service>.
	-|> sudo systemctl stop <service>.
	-|> sudo systemctl restart <service>.
	-|> sudo systemctl reload <service>.
	-|> sudo systemctl enable <service>.
	-|> sudo systemctl disable <service>.
	-|> sudo systemctl status <service>.
	-|> sudo systemctl reboot.
	-|> sudo systemctl poweroff.
	-|> sudo systemctl suspend.
	-|> systemctl list-units --type=service.
	-|> systemctl list-unit-files --type=service.


< hostname >

-|> The name assigned to a computer (host) on a network. It is used to identify the machine both locally and on a network, similar to how a person-s name identifies them in a group.


< Boot Loader >

-|> A software program that initializes and loads the OS onto a computer or device. IT's the first peice of code executed when a device is powered on. The bootloader verifies the integrity of the boot and recovery partitions and then transfers control to the OS kernel.


< LVM >

-|> Logical Volume Manager is a tool which includes allocating disks, striping, mirroring and resizing logical volumes. A hard drive or set of them is allocated to one or more physical volumes. LVM physical volumes can be placed on other block devices which might span two or more disks. The physical volumes are combined into logical volumes, with the exception of the /boot partition. The /boot partition cannot be on a logical volume group because the boot loader cannot read it. If the root (/) partition is on a logical volume, create a seperate /boot partition which is not a part of a volume group (a single logical volume that consist in a group of physical volumes).
-|> The volume groups can be divided into logical volumes, which are assigned mount points, such as /home and / and file system types, such as ext2 or ext3. When partitions reach their full cpaacity, free space from the volume group can be added to the logical volume to increase the size of the partition. When a new hard drive is added to the system, it can be added to the volume group, and partitions that are logical volumes can be increased in size.
-|> If an ext3 file system is being utilized, the hard drive is divided into partitions of defined sizes. If a partition becomes full, it is not easy to expand the size of the partition. Even if the partition is moved to another hard drive, the original hard drive space has to be reallocated as a different partition or not used.
-|> Configuration of LVM is during the graphical installation process, text based installation process or kickstart. system-config-lvm utility is used to create LVM configuration post-installation. After that, Disk Druid can be used.
-|> The steps to use LVM are:
	-|> Creating physical volumes from the hard drives.
	-|> Creating volume groups from thje physical volumes.
	-|> Creating logical volumes from the volume groups and assign the logical volumes mount points.


< BIOS >

-|> Basic Input/Ouput System, is a crucial piece of firmware that resides on a computer's motherboard. It is responsible for initializing and testing hardware components during the boot-up process and dfacilitating communication between the operating system and the hardware. The Steps that make this possible are:
	-|> Hardware Initialization, responsible for testing and initializing the essential hardware compontents.
	-|> Power-On Self Test, a self check of the hardware.
	-|> Boot Selection, the determination of which storage device to boot from, alowing the user to choose between different operating systems


< EFI >

-|> Extensible Firmware Interface, is a firmware interface that bridges the gap between the operating system and the hardware during computer startup. It is basically an enhanced BIOS with a more graphical interface, faster boot times, secure boot, which enhances the boot process, and better compatibility.


< UEFI >

-|> Unified Extensible Firmware Interface is an enhanced EFI.


< Firmware >

-|> A low level software thats embedded in a piece of hardware, which controlls directly its functioning.


< Software >

-|> A collection of uinstructions, data, or programs that tell a computer what to do. while the firmware is embedded in the hardware, therefore responsible for low level functions like booting and hardware communication, the software is used more for use-oriented taks like browsing the internet or running applications.


< Partition Scheme >

-|> A data structure on a storage device, the way a hardrive or other storage devices are divided into distinct sections called partitions, setting how the disk is divided into partitions, each acting as a seperate volume. 


< MBR >

-|> Master Boot Record, a partition scheme is an essential and crucial piece of data stored on the first sector of a hard disk or other storage devices. It's essentially a boot sector that contains the intial code necessary to load an operating system. It is responsible for the detection of the drive partition that holds the operative system. It is composed by:
	-|> Boot Code, which is a small program that's executed when the computer is powered on. It searches for and loads the operating system's bootloader.
	-|> PArtition Table, which describes the structure of the hard drive, including the nunber and location of partitions.
	-|> Disk Signature, used to identify the hard drive and distinguish it from other drives.
	-|>	MBR Signature (0xAA55), which indicates the presence of a valid MBR.
-|> Read by the hardware firmware, it is responsible for booting the system executing the boot code, it identifies the active partition containing the bootloader for the OS and loads it into the memory.

< GPT >

-|> Globally Unique Identifers (GUIDs) Partition Table is a newer partitioning scheme that's part opf the UEFI standard and gradually replacing the older MBR scheme. It offers more flexibility and supports larger disks compared to MBR, particularly for moder UEFI-based systems. GPT uses globally unique identifiers(GUIDs) to define partitions, allowing for more than for more than 4 primary partitions and larger lofical block addressing (LBA) for larger disks. It works within these steps:
	-|> GPT Header contains info about the disk, such as the number of partitions, and the location of the partition table.
	-|> Partition Table sotres info about each partition, including its size, starting and ending points, and the GUID that identifies it.
	-|> Protective MBR which is often placed at the beginning of the disk to protect the GPT data structure from being corrupted by older software that doesn't understand GPT.


< MBR VS GPT >

-|> 32-bit vs 64-bit LBA
-|> 4 partitions vs 128 partitions
-|> GPT includes a backup partition table
-|> GPT includes CRC32 for improved data integrity
-|> GPT is compatible with UEFI


< Filesystem Types >

-|> Different ways of an OS of storing, organizing and managing data on a storage device. These are:
	-|> FAT (File Allocation Table), an older file system that is used in some older systems and USB drives.
	-|> NTFS (New Technology File System), the standard file system for Windows, offering folder permissions, compression and encryption.
	-|> exFAT (Extended File Allocation Table), used for flash drives and external drives, offering compatibility with both Windows and macOS.
	-|> APFS (Apple File System), a modern file system used on Macs and iOS devices, allowing encryption, cloning and snapshots.
	-|> Ext (Extended File System), a family of file systems commonly used in Linux and Unix-based systems, including ext2, ext3 and ext4.
	-|> HFS (Hierarchical File System), used by older version of macOS, with HFS+ being its successor.
	-|> NFS (Network File Systems), allows acces to files on remote computers as if they were local.
	-|> GFS (Global File System), supports parallel access to files across multiple machines.
	-|> ZFS (Zetabyte File System), a powerful file syustem known for its reliability and features like data compression, deduplicattion, and snapshots.


< ext4 >

-|> A journaling file system for Linux, developed as the successor to ext3. It's known for supporting larger filesystems and handling more files than its predecessor, making it suitable for moden storage needs. ext4 offers improvements in performance, realiability and storage cpaacity, including features like delayed allocation and a 48-bit block addressing scheme. Introduced in 2008, this most recent version of ext, allows files up to 16TB and volumes up to 1EB.


< SDA >

-|> SCSI (Small Computer System Interface) Disk A.
	-|> SCSI refers to a set of standards for physically connecting and transferring data between computers and peripheral devices, best known for its use with storage devices such as hard disk drives. These standards define commands, protocols, electrical, optical and logical interfaces.


< TTY >

-|> TeleTYpe writer, refers to physical devices that even today are used by deaf people to communicate through phones. In Unix/Linux systems refers to the terminal and is used to refer to an actual terminal compared to a script or program that simulates one.


< PATH >

-|> An environment variable that tells the system where to look for when a command is used by the user. The system is gonna look for the executable and will run the first iteration that finds.

< sudoers >

-|> A file to manage root permissions and its intricacies.
-|> Defaults:
	-|> scure_path, its an alternative PATH for when a command is used with sudo. This way, any attemps to run fake commands like "ls" or "cd" are fought.
	-|> passwd_tries, sets a limit of how many times can a password be attemped each time the sudo command is used.
	-|> log_input, defines that any sudo session (the time after using sudo that doesn't need any further password) input is logged into a file.
	-|> log_output, defines that any sudo session output is logged into a file.
	-|> iolog_dir, defines the directory of the file where the sudo session loggs are stored.


< cron >

-|> A cronometer daemon that runs jobs automatically at schedule times.
-|> Useful commands:
	-|> crontab -e (cron table), set scripts to run at a defined pace for the current user. Use with sudo to modify root's (all users) in /tmp/crontab.*
	-|> crontab -l, list current cron jobs.
	-|> crontab -r, remove crontab, deleting all jobs.

############# THE INTERNET #############

< Data Flow >

-|> Several communication layers have to happern for data to flow from one place to another through the internet. This is made possible to a load of programs, servers, interfaces and systems. For starters, the steps for the flow of data to happern are:
	1. The user types www.example.com into a browser.
	2. Application Layer (HTTP) sends a request.
	3. Transport Layer (TCP) breaks it into segments, ensures delivery.
	4. Internet Layer (IP) routes it across networks.
	5. Link Layer sends it physically over Ethernet or Wi-Fi.
	6. At the other end, the process reverses - the server receives and replies.

< Packets >

-|>


< Internet Protocol Suite >

-|> Commonly known as TCP/IP, is a framework for organizing the set of communication protocols used in the Internet and similar computer networks according to functional criteria. The foundational protocols in the suit are:
	-|> TCP (Transmission Cotnrol Protocol).
	-|> UDP (User Datagram Protocol).
	-|> IP (Internet Protocol).
-|> The internet protocol suite provides end-to-end data communication specifying how data should be packetized, addressed, transmitted, routed, and received. This funcitonality is organized into four abstraction layers of protocol classification, to hide the working details of a subsystem:
	-|> Link Layer - Contains communication methods for data that remains within a signle network segment (link). 
	-|> Internet Layer - Provides internetworking between independent networks.
	-|> Transport Layer - Handles host-to-host communication.
	-|> Application Layer - providing process-to-process data exchange for applications.
-|> The IETF (Engeneering Task Force) maintains the Internet Protocol suite technical standards.


< OSI >

-|> The Open System Interconnection (OSI) model is a reference model developed by the Internation Organization for Standardization that provides a common basis for the coordination of standards development for the purpose of systems interconnection. It represents the communication system through the idea of components that are destinguished in seven abstraction layers from lowest to highest:
	-|> Physical - Closely associated with the physical connection between devices. Provides an electrical, mechanical and procedural interface to the transmission medium, specifying the shapes and properties of the electrical connectors, the frequencies to transmit on, the line code to use and similar low-level parameters. It is implemented in a dedicated PHY, which connects a link layer device (often called MAC) to a physical medium such as an optical fiber or copper cable and includes 2 layers within itself (PCS and PMD).
		-|> Physical Coding Sublayer (PCS) - A network protocol sublayer in the Fast Ethernet, Gigabit Ethernet and 10 Gigabit Ethernet standards. Resides at the top of the physical layer and provides an interface between the physuical medium attachment sublayer (PMA) and the media-independent interface (MMI).
	-|> Data Link - The protocol layer that transfers data between nodes on a network segment across the physical layer. It provides the functional and procedural means to transfer data between network entities and may also provide the means to detect and possibly correct errors that can occur in the physical layer.
	-|> Network - Responsible for packet forwarding including routing through intemediate routers.
	-|> Transport - A group of protocols that provide end-to-end communication services for applications. It provides services such as connection-oriented communication, reliability, flow control, and multiplexing.
	-|> Session - Provides the mechanism for opening, closing and managing a sessino between end-user application processes, like a semi-permanent dialogue. They consist on requests and responses that occur between applications.
	-|> Presentation - Translates the data for the network. Commonly called the syntax layer, responding to service requests from the application layer and issuing service requests to the session layer through a unique presentation service acces point (PSAP).
	-|> Application - Specifies the shared comuncation protocols and interface methods used by hosts in a communcation network.


< Information System >

-|> Any system that collects, processes, stores, and distributes information. It relies on the existence of:
	-|> Hardware - Servers, client devices and network equipment.
	-|> Software - Browsers, web servers, content management systems, databases.
	-|> Data - Web pages, multimedia, user data, links, databases.
	-|> People - Users, developers, administrators, content creators.
	-|> Processes - Methods for data colection, content delivery, updates, access control.


< WWW >

-|> World Wide Web, is an information system that enables content sharing over the Internet through user-friendly ways menat to appeal to users beyond IT specialists and hobbyists. It alows documents and other web recources to be accessed over the Internet according to specific rules of the HTTP. Invented by Tim Berners-Lee in CERN in 1989, it was conceived as a universal linked information system. Documents and other media content are made available to the network through web servers and can be accessed by programs such as web browsers.



< IP >

-|> The Internet Protocol, is the network layer communications protocol in the Internet protocol suite for relaying datagrams across network boundaries. Its routing function enables internetworking ane essentially establishes the Internet. It delivers packets from the source host to the destination host solely based on the IP addresses in the packed headers, defining packet structures that encapsulate the data to be deliveres. It also defines addressing methods that are used to label the datagram with source and destination information.


< TCP >

-|> Transmission Control Protocol, is one of the core protocols of the Internet Protocol(IP) suite. It's a connection-oriented, reliable transport protocol that ensures ordered and error-checked delivery of data between computers over a network. It works alongside IP, which handles addressing and routing.	
-|> Features:
	-|> Reliable, guarantees data will be delivered and feebacks failure.
	-|> Connection-Oriented, a connection (handshake) is established before data transfer begins.
	-|> Ordered Delivery, data arrives in the same order it was sent.
	-|> Error Checking, Uses checksums and acknowledgments.
	-|> Prevents the sender from overwhelming the receiver.


< HHTP >

-|> Hypertext Transfer Protocol, is an application layer protocol in the Internet protocol suite model for distributed, collaborative, hypermedia information systems. HTTP is the foundation of data communication for the World Wide Web


< SMTP >

-|>


< DNS >

-|>


< FTP >

-|>


< UDP >

-|>


< DHCP >


< SNMP >

-|>


< URL >


< HTML >


< Lighttpd >

-|> An open-source, secure, lightweight and fast web server optimized for high-performance environments with a low memory footprint and minimum CPU load. This software is suitable for static web pages and servers that have issues with load problems. It supports a wide range of features such as:
	-|> Load Balancing - The process of distributing a set of tasks over a set of resources (computing units), with the aim of making their overall processing more efficient. It optimizes response times and avoids unvevenly overloading some compute nodes while other compute nodes are left idle. The load balancer is placed in front of the servers and routes requests to the least-busy or helathiest one, and redirects any failed server task to another.
	-|> FastCGI - A binary protocol for interfacing interative programs with a web server. It is a variation on the earlier Common Gateway Interface, which is an interface that enables web servers to execute an external program to process HTTP or HTTPS user requests. When a web user submits a web form on a web page that uses CGI, it's data is sent to the web server within a HTTP request with a URL denoting a CGI script in a new computer process, passing the form data to it. The CGI script passes its output, usually in the form of HTML, to the web server, and the server relays it back to the browser as its response to the beowser's request.
	-|> HTTP proxy - 
	-|> WEBSockets -


< MariaDB >


user ->

group ->

cron ->

crypts ->

tail ->

network ->

mountpoints ->

dmsetup ->

logical partion ->

physical partition ->

extended partition ->

MAC ->

firewalld -> 

Cloud ->


#############  COMMANDS   ###############

fdisk -> format disk or fixed disk. A partitioning tool that allows creating, viewing, deleting and modifying partitions on a hard disk, managing a partition table directly.

sudo -> Super user do. used to run commands with root previleges.

uname -> Print some system information.

lscpu -> Display CPU architecthure information.

free -> Display the total amount of free and used swap memory.

df -> Display the amount of disk space available containing each file argument.

top -> Provides a dynamic real-time view of a running system and displays system summary information.

uptime -> Displays the time, how long the system has been running, how many users are logged on and the system load averages for the past 1, 5 and 15 minutes.

ip -> show/manipulate routing, network devices, interfaces and tunnels.

ss -> Investigates sockets, used to dump socket statistics.

lsblk -> list block devices.

journalctl -> query the systemd journal.


#############   DEFENSE   ###############

1. Create a new user and assign it to a group
2. explain how the script works.
3. interupt script created wihtout editing it
4. take a look at cron
5. MAYBE extra services. Open more ports to suit my needs. Firewalld rules apply
6. get a similar structure to BonusPartitions.png


############# EXTRA INFO ###############

KDump -> 
NGINX ->
Apache2 ->
